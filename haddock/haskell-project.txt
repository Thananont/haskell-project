-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Thananont/haskell-project</a>
@package haskell-project
@version 0.1.0.0

module Types

-- | Type Aliases for the URLs
type URL = String
type MultipleURL = [String]

-- | Data Structure for Mode
data Mode
Mode :: String -> Bool -> Bool -> Bool -> String -> Mode
[isType] :: Mode -> String
[isTflService] :: Mode -> Bool
[isFarePaying] :: Mode -> Bool
[isScheduledService] :: Mode -> Bool
[modeName] :: Mode -> String

-- | Data Structure for ModeDB obtained querying modes from the database
data ModeDB
ModeDB :: String -> Bool -> Bool -> Bool -> String -> ModeDB
[isTypeDB] :: ModeDB -> String
[isTflServiceDB] :: ModeDB -> Bool
[isFarePayingDB] :: ModeDB -> Bool
[isScheduledServiceDB] :: ModeDB -> Bool
[modeNameDB] :: ModeDB -> String
type Modes = [Mode]

-- | Data Structure for the Route
data Route
Route :: String -> String -> String -> String -> [Disruption] -> String -> String -> [LineStatus] -> [RouteSection] -> Route
[routeIsType] :: Route -> String
[routeId] :: Route -> String
[routeName] :: Route -> String
[routeModeName] :: Route -> String
[routeDisruptions] :: Route -> [Disruption]
[routeCreated] :: Route -> String
[routeModified] :: Route -> String
[routeLineStatuses] :: Route -> [LineStatus]
[routeRouteSections] :: Route -> [RouteSection]

-- | Data Structure for RouteDB obtained querying routes from the database
data RouteDB
RouteDB :: String -> String -> String -> String -> String -> String -> RouteDB
[routeIdDB] :: RouteDB -> String
[routeIsTypeDB] :: RouteDB -> String
[routeNameDB] :: RouteDB -> String
[routeModeNameDB] :: RouteDB -> String
[routeCreatedDB] :: RouteDB -> String
[routeModifiedDB] :: RouteDB -> String

-- | Data Structure for RouteSection part of the Routes API
data RouteSection
RouteSection :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> RouteSection
[routeSectionIsType] :: RouteSection -> String
[routeSectionName] :: RouteSection -> String
[direction] :: RouteSection -> String
[originationName] :: RouteSection -> String
[destinationName] :: RouteSection -> String
[originator] :: RouteSection -> String
[destination] :: RouteSection -> String
[serviceType] :: RouteSection -> String
[validTo] :: RouteSection -> String
[validFrom] :: RouteSection -> String

-- | Data Structure for RouteSectionDB obtained querying routesections from
--   the database
data RouteSectionDB
RouteSectionDB :: String -> String -> String -> String -> String -> String -> String -> String -> String -> String -> RouteSectionDB
[routeSectionNameDB] :: RouteSectionDB -> String
[routeSectionIsTypeDB] :: RouteSectionDB -> String
[routeModeNameKeyDB] :: RouteSectionDB -> String
[routeIdKeyDB] :: RouteSectionDB -> String
[directionDB] :: RouteSectionDB -> String
[originationNameDB] :: RouteSectionDB -> String
[destinationNameDB] :: RouteSectionDB -> String
[originatorDB] :: RouteSectionDB -> String
[destinationDB] :: RouteSectionDB -> String
[validToDB] :: RouteSectionDB -> String

-- | Data Structure that represents the service type of a route
data ServiceType
ServiceType :: String -> String -> String -> ServiceType
[serviceTypeIsType] :: ServiceType -> String
[serviceTypeName] :: ServiceType -> String
[serviceTypeUri] :: ServiceType -> String

-- | Data Structure that represents the line status of a route
data LineStatus
LineStatus :: String -> LineStatus
[lineStatusIsType] :: LineStatus -> String

-- | Data Structures for the Disruptions (Extra Implementation)
--   
--   Data Structure that represents disruption information for a route
data Disruption
Disruption :: String -> Disruption
[disruptionIsType] :: Disruption -> String

-- | Data Structure that represents crowding information
data Crowding
Crowding :: String -> Crowding
[crowdingIsType] :: Crowding -> String

-- | Data Structure that represents disruption details
data DisruptionDetail
DisruptionDetail :: String -> String -> String -> Maybe String -> Maybe String -> [AffectedRoute] -> [AffectedStop] -> Maybe String -> DisruptionDetail
[category] :: DisruptionDetail -> String
[disruptionDetailIsType] :: DisruptionDetail -> String
[description] :: DisruptionDetail -> String
[created] :: DisruptionDetail -> Maybe String
[lastUpdate] :: DisruptionDetail -> Maybe String
[affectedRoutes] :: DisruptionDetail -> [AffectedRoute]
[affectedStops] :: DisruptionDetail -> [AffectedStop]
[closureText] :: DisruptionDetail -> Maybe String

-- | Data Structure that represents routes affected by a disruption
data AffectedRoute
AffectedRoute :: String -> String -> AffectedRoute
[affectedRouteId] :: AffectedRoute -> String
[affectedRouteName] :: AffectedRoute -> String

-- | Data Structure that represents stops affected by a disruption
data AffectedStop
AffectedStop :: String -> String -> AffectedStop
[affectedStopId] :: AffectedStop -> String
[affectedStopName] :: AffectedStop -> String
type DisruptionsResponse = [DisruptionDetail]

-- | Data Structures for the Search Feature (Extra Implementation)
data SearchDestination
SearchDestination :: String -> String -> Int -> [Match] -> SearchDestination
[searchDestinationTypeIsType] :: SearchDestination -> String
[query] :: SearchDestination -> String
[total] :: SearchDestination -> Int
[searchMatches] :: SearchDestination -> [Match]

-- | Data Structure that represents the search result matches
data Match
Match :: String -> String -> [String] -> Maybe String -> String -> String -> Double -> Double -> Match
[matchIsType] :: Match -> String
[icsId] :: Match -> String
[modes] :: Match -> [String]
[zone] :: Match -> Maybe String
[id] :: Match -> String
[searchName] :: Match -> String
[lat] :: Match -> Double
[lon] :: Match -> Double
instance GHC.Generics.Generic Types.Mode
instance GHC.Show.Show Types.Mode
instance GHC.Generics.Generic Types.ModeDB
instance GHC.Show.Show Types.ModeDB
instance GHC.Generics.Generic Types.RouteDB
instance GHC.Show.Show Types.RouteDB
instance GHC.Generics.Generic Types.RouteSection
instance GHC.Show.Show Types.RouteSection
instance GHC.Generics.Generic Types.RouteSectionDB
instance GHC.Show.Show Types.RouteSectionDB
instance GHC.Generics.Generic Types.ServiceType
instance GHC.Show.Show Types.ServiceType
instance GHC.Generics.Generic Types.LineStatus
instance GHC.Show.Show Types.LineStatus
instance GHC.Generics.Generic Types.Crowding
instance GHC.Show.Show Types.Crowding
instance GHC.Generics.Generic Types.Match
instance GHC.Show.Show Types.Match
instance GHC.Generics.Generic Types.SearchDestination
instance GHC.Show.Show Types.SearchDestination
instance GHC.Generics.Generic Types.Disruption
instance GHC.Show.Show Types.Disruption
instance GHC.Generics.Generic Types.Route
instance GHC.Show.Show Types.Route
instance GHC.Generics.Generic Types.AffectedRoute
instance GHC.Show.Show Types.AffectedRoute
instance GHC.Generics.Generic Types.AffectedStop
instance GHC.Show.Show Types.AffectedStop
instance GHC.Generics.Generic Types.DisruptionDetail
instance GHC.Show.Show Types.DisruptionDetail
instance Data.Aeson.Types.ToJSON.ToJSON Types.RouteSectionDB
instance Database.SQLite.Simple.FromRow.FromRow Types.RouteSectionDB
instance Data.Aeson.Types.ToJSON.ToJSON Types.RouteDB
instance Database.SQLite.Simple.FromRow.FromRow Types.RouteDB
instance Data.Aeson.Types.ToJSON.ToJSON Types.ModeDB
instance Database.SQLite.Simple.FromRow.FromRow Types.ModeDB

module Parse

-- | Parses a ByteString containing JSON data into a list of Mode objects
--   (Modes).
parseModes :: ByteString -> Either String Modes

-- | Helper function to concatenate the URLs for the Routes by Mode API
parseURLforRoutesAPI :: [String] -> String -> [String]

-- | Parses a ByteString containing JSON data into a list of Routes
--   objects.
parseRoutes :: ByteString -> Either String [Route]

-- | Helper function to concatenate the URLs for the Disruptions by Mode
--   API
parseURLforDisruptionsAPI :: [String] -> String -> [String]

-- | Parses a ByteString containing JSON data into a list of Disruption
--   objects.
parseDisruptions :: ByteString -> Either String DisruptionsResponse
instance Data.Aeson.Types.FromJSON.FromJSON Types.Mode
instance Data.Aeson.Types.FromJSON.FromJSON Types.Route
instance Data.Aeson.Types.FromJSON.FromJSON Types.RouteSection
instance Data.Aeson.Types.FromJSON.FromJSON Types.Disruption
instance Data.Aeson.Types.FromJSON.FromJSON Types.LineStatus
instance Data.Aeson.Types.FromJSON.FromJSON Types.SearchDestination
instance Data.Aeson.Types.FromJSON.FromJSON Types.Match
instance Data.Aeson.Types.FromJSON.FromJSON Types.DisruptionDetail
instance Data.Aeson.Types.FromJSON.FromJSON Types.AffectedRoute
instance Data.Aeson.Types.FromJSON.FromJSON Types.AffectedStop

module Fetch

-- | General Download Function to Fetch Data from an Endpoint
download :: URL -> IO ByteString

-- | Function to make multiple API Calls
downloadMultiple :: MultipleURL -> IO [ByteString]

module Database

-- | A function that drops the mode, route, and routesection table from the
--   database
dropAllTables :: Connection -> IO ()

-- | A function that dump the data from the database into a json file
dumpDatabase :: Connection -> IO ()

-- | A function that initializes the tables in the database
initTables :: Connection -> IO ()

-- | A function that takes the modes list and map them to the
--   executeInsertMode function to insert them into the table, create the
--   table if it doesn't exist
insertModes :: Connection -> [Mode] -> IO ()

-- | A function that takes the route list and map them to the
--   executeInsertRoute function to insert them into the tables, create the
--   tables if it doesn't exist
insertRoutesByMode :: Connection -> [Route] -> IO ()

-- | A function that queries to print all of the name of the modes in the
--   database
queryAllMode :: Connection -> IO [String]

-- | A function that queries to print all name of the routes from a mode in
--   the database
queryAllRoutes :: Connection -> String -> IO [String]

-- | A function that creates a connection with the database
createDatabase :: IO Connection

-- | A function that prints a mode's name with the first letter in
--   uppercase
printModeName :: [String] -> IO ()

-- | A function that queries for the search function
fetchStops :: String -> String -> IO (Either String SearchDestination)

-- | A function to do a pretty print
printMatch :: Match -> IO ()
queryAllDisruptions :: ByteString -> IO [DisruptionDetail]

-- | A function that maps the disruptions to the printDisruption to be
--   printed for each disruption of each mode
printDisruptions :: String -> [DisruptionDetail] -> IO ()

-- | A function that queries for all stop points from a mode in the
--   database
queryAllStopPoints :: Connection -> String -> IO [String]
